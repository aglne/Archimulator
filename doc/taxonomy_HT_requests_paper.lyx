#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass paper
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Taxonomy for Helper Threaded Inter-Core Data Prefetching"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Taxonomy for Helper Threaded Inter-Core Data Prefetching
\end_layout

\begin_layout Author
Min
\begin_inset space ~
\end_inset

Cai, Zhimin
\begin_inset space ~
\end_inset

Gu
\begin_inset Foot
status open

\begin_layout Plain Layout
Min Cai, School of Computer Science and Technology, Beijing Institute of
 Technology, Beijing, China, e-mail: 
\begin_inset CommandInset href
LatexCommand href
target "min.cai.china@gmail.com"

\end_inset

.
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Zhimin Gu, School of Computer Science and Technology, Beijing Institute
 of Technology, Beijing, China, e-mail: 
\begin_inset CommandInset href
LatexCommand href
target "zmgu@x263.net"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
For applications exhibiting irregular memory access patterns, helper threaded
 inter-core data prefetching on shared cache chip multiprocessors (CMPs)
 speculatively issue LLC requests to the predicted memory addresses before
 the computation core access these addresses.
 Effective helper threaded inter-core data prefetching demands that the
 helper thread (HT) should issue correct and timely LLC requests just before
 the main thread (MT) requests them.
 Unfortunately, this ideal case can not be assumed in the existing implementatio
n of helper threaded inter-core data prefetching: inaccurate and/or untimely
 LLC requests coming from HT could not contribute to the MT performance,
 but instead stress and pollute LLC if no effective LLC replacement and
 pollution-aware feedback techniques are employed.
 The traditional classification of 
\begin_inset Quotes eld
\end_inset

good
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

bad
\begin_inset Quotes erd
\end_inset

 prefetches is insufficient to chracterize the cache pollution and inefficiency
 of the scheme.
\end_layout

\begin_layout Abstract
In this paper, we present a finegrained taxonomy of prefetches in the scheme
 of helper threaded inter-core data prefetching to shed light on the incurred
 cache pollution and inefficiency of the scheme.
 Firstly, the basic HT scheme that we experiment with is introduced.
 Secondly, based on the relative timing of HT and MT LLC requests, we discuss
 the break down of HT requests into late, good, ugly, early, bad and redundant
 ones.
 Early and bad HT requests are the major cause of cache pollution caused
 by the scheme.
 Other requests but good are indicators for inefficiency of the scheme.
 Thirdly, the experimental methodology to implement the proposed taxonomy
 is presented.
 Lastly, Experimental results from cycle accurate simulation of the Pthreads
 based helper threaded version of the memory-intensive benchmark mst from
 Olden suite is given.
\end_layout

\begin_layout Keywords
chip multiprocessors, helper threaded inter-core data prefetching, cache
 replacement, cache pollution, inter-thread interference
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
For applications exhibiting irregular memory access patterns, helper threaded
 inter-core data prefetching on shared cache chip multiprocessors (CMPs),
 in its most basic form, (1) uses the shared cache enabled fast inter-thread
 communication when both the main core and the otherwise idle neighboring
 helper core access the same cache line; (2) constructs a helper thread
 in the software running on the helper core to speculatively issue LLC prefetch
 requests to the predicted memory addresses before the computation core
 access these addresses.
  Effective helper threaded data prefetching demands that the helper thread
 (HT) should issue correct and timely LLC requests just before the main
 thread (MT) requests them.
 Unfortunately, this ideal case can not be assumed in the existing implementatio
n of helper threaded inter-core data prefetching: inaccurate and/or untimely
 LLC requests coming from HT could not contribute to the MT performance,
 but instead stress and pollute LLC if no effective LLC replacement techniques
 are employed.
 
\end_layout

\begin_layout Standard
Several metrics have been proposed in the past for evaluating the effectiveness
 of hardware based data prefetching, among which prefetch accuracy and coverage
 are the most intuitive ones 
\begin_inset CommandInset citation
LatexCommand cite
key "Srinivasan2004"

\end_inset

.
 We can easily adapt the definitions of accuracy and coverage for hardware
 based data prefetching to the HT scheme.
 HT request accuracy is defined as the ratio of the number of useful HT
 requests to the number of total HT requests.
 And HT request coverage is defined as the ratio of the number of useful
 HT requests to the number of MT misses plus MT hits to HT requested data.
 Here, an HT request is called useful when its requested data is referenced
 by MT before evicted.
 Furthermore, similar to the approach to hardware prefetching, to measure
 coverage and accuracy, all HT requests can be categorized into 
\begin_inset Quotes eld
\end_inset

useful
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

useless
\begin_inset Quotes erd
\end_inset

 HT requests 
\begin_inset CommandInset citation
LatexCommand cite
key "Srinivasan2004"

\end_inset

.
 A 
\begin_inset Quotes eld
\end_inset

useful
\begin_inset Quotes erd
\end_inset

 HT request is one whose brought data is hit by a MT request before it is
 replaced, while a 
\begin_inset Quotes eld
\end_inset

useless
\begin_inset Quotes erd
\end_inset

 HT request is one whose brought data is replaced before it is hit by a
 MT request.
 However the above traditional accuracy and coverage metrics for HT requests
 and the classification of 
\begin_inset Quotes eld
\end_inset

useful
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

useless
\begin_inset Quotes erd
\end_inset

 HT requests don't care about the LLC pollution and inter-thread interference
 caused by HT LLC requests, which are two kinds of deficiencies in the HT
 scheme.
 
\end_layout

\begin_layout Standard

\color red
In this paper, we present a pollution-aware feedback mechnism for dynamic
 helper threaded inter-core data prefetching, based on a pollution-aware
 taxonomy of HT LLC requests.
 A pollution aware taxonomy of HT LLC requests is presented from the view
 of the contribution of HT LLC requests to the MT performance.
 Based on the pollution aware taxonomy of HT LLC requests, the feedback
 mechanism for dynamic helper threaded inter-core data prefetching is proposed
 to finetune LLC replacement and parameters of the HT scheme.
 Experimental results from cycle accurate simulation of the Pthreads based
 helper threaded version of the memory-intensive mst benchmark in Olden
 show that: (1) there is non-trivial LLC pollution caused by HT in helper-thread
ed data prefetching on CMPs; (2) LLC request taxonomy based dynamic LLC
 replacement can improve the effectiveness and timeliness of helper-threaded
 data prefetching on CMPs.
 We assume here a two level cache hierarchy where L1 caches are private
 and the L2 cache is shared among all processor cores on a single chip.
 
\end_layout

\begin_layout Standard

\color red
The main contributions of this paper can be summarized as answers for the
 following two questions:
\end_layout

\begin_layout Enumerate

\color red
How can the HT LLC requests be classified based on the cache pollution and
 inter-thread LLC interference caused by HT LLC requests in helper threaded
 inter-core data prefetching (or the HT scheme)?
\end_layout

\begin_layout Enumerate

\color red
How can LLC replacement be improved based on the observed result of the
 proposed pollution-aware HT LLC request taxonomy in the HT scheme?
\end_layout

\begin_layout Standard

\color red
The rest of this paper is organized as follows.
 Section 2 presents the pollution aware taxonomy of HT requests and the
 experimental result of mst in Olden.
 Section 3 discusses the dynamic LLC replacement for helper threaded inter-core
 data prefetching and its experimental results.
 Section 4 presents the experimental methodology used in this work.
 Section 5 discusses results.
 Section 6 talks about related work.
 In section 7 we conclude the paper.
\end_layout

\begin_layout Section
Background and Motivation
\end_layout

\begin_layout Subsection
The Scheme of Helper Threaded Inter-Core Data Prefetching on Shared Cache
 CMPs
\end_layout

\begin_layout Standard
As illustrated in Fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Helper-Threaded-Inter-Core-Data-Prefetching"

\end_inset

, the workflow of helper threaded inter-core data prefetching we implement
 here can be described as follows.
 
\end_layout

\begin_layout Enumerate
the helper thread is spawned in the entry point 
\family typewriter
main()
\family default
 of the program; 
\end_layout

\begin_layout Enumerate
the helper thread remains dormant until some caller of the target hotspot
 function has been invoked and code placed in the caller wakes up the helper
 thread to let it start the 
\family typewriter
prelude
\family default
 where the code in the helper thread skips some iterations of pointer traversals
 (i.e., there is no prefetch issued) to compensate the long time used for
 data prefetching in the helper thread as compared to the short time used
 in computation work in the main thread; 
\end_layout

\begin_layout Enumerate
the helper thread enters a 
\family typewriter
steady state
\family default
 of issuing LLC prefetch requests in loop iterations of pointer traversals
 ahead of the main thread until the execution of the program has passed
 some point(s) in the target hotspot function; 
\end_layout

\begin_layout Enumerate
the code in helper thread is synchronizing pointers with the main thread
 and begin the next turn of servicing hotspots; 
\end_layout

\begin_layout Enumerate
after all the prefetching work is done, the helper thread is destroyed in
 main().
 
\end_layout

\begin_layout Standard
Two parameters in the HT scheme controls its aggressiveness: (1) the number
 of loop iterations of pointer traversals that the helper thread code skip
 after synchronizing with the main thread in the prelude is called 
\family typewriter
lookahead
\family default
; (2) the number of loop iterations of pointer traversals in which helper
 thread code issue LLC prefetch requests in the steady state is called 
\family typewriter
stride
\family default
.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/itecgo/Archimulator/doc/ht_scheme.pdf
	scale 32
	BoundingBox 30bp 38bp 810bp 538bp
	clip

\end_inset


\begin_inset VSpace defskip
\end_inset


\begin_inset Caption

\begin_layout Plain Layout
The Scheme of Helper Threaded Inter-Core Data Prefetching
\begin_inset CommandInset label
LatexCommand label
name "fig:Helper-Threaded-Inter-Core-Data-Prefetching"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Prefetch Taxonomy
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename prefetch_timeline.pdf
	scale 45
	BoundingBox 30bp 38bp 810bp 538bp
	clip

\end_inset


\begin_inset VSpace defskip
\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Prefetch Timeline
\begin_inset CommandInset label
LatexCommand label
name "fig:prefetch_timeline"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Evaluation Methodology
\end_layout

\begin_layout Standard
We use an in-house CMP architectural simulator named Archimulator in our
 experiments mentioned in this work.
 Archimulator is a flexible execution-driven architectural simulator written
 in Java and running on Linux.
 It provides fast forward functional simulation and cycle-accurate application-o
nly simulation of MIPSII executables on multicore architectures consisting
 of out-of-order super-scalar cores and configurable memory hierarchy of
 directory-based MESI coherence.
 It has basic support of simulating Pthreads based multithreaded workloads.
 
\end_layout

\begin_layout Subsection
Simulated CMP Architecture
\end_layout

\begin_layout Standard
As shown in Fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Simulated-CMP-Architecture"

\end_inset

, the simulated target CMP architecture has two cores where each core is
 a two-way SMT with its own private L1 caches (32KB 8-way data caches and
 32KB 4-way instruction caches).
 Both cores share a 4MB 8-way L2 cache.
 MESI coherence is maintained between L1 caches.
 An LRU cache called HTRVC is attached to the LLC(L2) to implement the taxonomy
 of HT LLC requests, which will be detailed in the next section.
 Detailed microarchitecture parameters are listed in Tab.
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Baseline-Hardware-Configurations"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/itecgo/Archimulator/doc/res/cacheconfig.pdf
	scale 58
	BoundingBox 30bp 475bp 330bp 760bp
	clip

\end_inset


\begin_inset VSpace defskip
\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Simulated CMP Architecture
\begin_inset CommandInset label
LatexCommand label
name "fig:Simulated-CMP-Architecture"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center

\size scriptsize
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Pipeline
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "66col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\size scriptsize
4-wide superscalar OoO 2 x 2 CMP; physical register file capacity: 128;
 decode buffer capacity: 96; reorder buffer capacity: 96; load store queue
 capacity: 48
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Branch Predictors
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "66col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\size scriptsize
Perfect branch predictor
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Execution Units
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Count
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Operation Lat.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Issue Lat.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Int ALU
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Int Mult
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Int Div
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
20
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
19
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Fp Add
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Fp Compare
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Fp Convert
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Fp Mult
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Fp Div
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
40
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
20
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Fp Sqrt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
80
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
40
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Read Port
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Write Port
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Cache Geometries
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Size
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Assoc.
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Line Size
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Hit Lat.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
l1i
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
32KB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
64B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
l1d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
32KB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
64B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
l2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
4096KB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
64B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
10
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Interconnect
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "66col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\size scriptsize
Switch based P2P topology, 32B link width
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
Main Memory
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size scriptsize
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "66col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\size scriptsize
4GB, 200-cycle fixed latency
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\size default

\begin_inset VSpace defskip
\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Baseline Hardware Configurations
\begin_inset CommandInset label
LatexCommand label
name "tab:Baseline-Hardware-Configurations"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Software Context to Hardware Thread Mapping
\end_layout

\begin_layout Standard
In a typical Pthreads based HT program, there are three threads when running:
 MT, HT and the Pthreads manager thread.
 The Pthreads manager thread takes the role of spawning, suspending and
 resuming HT by passing signals to HT.
 Consider a simulated target multicore machine which has two cores where
 each core supports two hardware threads.
 In our application-only simulation using Archimulator, without the OS intervent
ion, one hardware thread can only run at least one software context (or
 simply called thread).
 Therefore, the typical software context to hardware thread mappings can
 be: C0T0 
\begin_inset Formula $\rightarrow$
\end_inset

 MT, C0T1 
\begin_inset Formula $\rightarrow$
\end_inset

 Pthreads manager thread, C1T0 
\begin_inset Formula $\rightarrow$
\end_inset

 HT (C = core, T = thread), as shown in Fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Simulated-CMP-Architecture"

\end_inset

.
 We use this context mapping in the following discussions.
 
\end_layout

\begin_layout Subsection
ROI Based Two-Phase Fast Simulation of Helper Threaded Workloads
\end_layout

\begin_layout Standard
As shown in Fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Helper-Threaded-Inter-Core-Data-Prefetching"

\end_inset

, here we use two-phase simulation strategy to reduce simulaton time of
 memory-intensive benchmark executions which often take very long to complete.
 We utilize the special case when a MIPS32 assembly instruction 
\family typewriter
addiu
\family default
 is invoked with register operands being R0: 
\family typewriter
addiu R0, R0, imm
\family default
 to indicate the spawning point of the helper thread (named by 
\begin_inset Quotes eld
\end_inset

HT Spawn
\begin_inset Quotes erd
\end_inset

: 
\family typewriter
addiu R0, R0, 
\family default
3720).
 Since the code executed after encountering the 
\begin_inset Quotes eld
\end_inset

HT spawn
\begin_inset Quotes erd
\end_inset

 is our region of interest (ROI) in this work, code execution before encounterin
g the 
\begin_inset Quotes eld
\end_inset

HT spawn
\begin_inset Quotes erd
\end_inset

 can be simulated functionally without the hassle of modeling the microarchitect
ure details while not hurting the experimental results.
 To ensure caches are warmed up, we simulate in the detailed simulation
 mode 100 million instructions in the main thread after the 
\begin_inset Quotes eld
\end_inset

HT Spawn
\begin_inset Quotes erd
\end_inset

 pseudocall is encountered.
\end_layout

\begin_layout Section*
Acknowlegments
\end_layout

\begin_layout Standard
This work was supported by the National Natural Science Foundation of China
 under the contract No.
 61070029.
 
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "ref"
options "IEEEtran"

\end_inset


\end_layout

\end_body
\end_document
