Archimulator 3.0 README
========

This README briefly describes what Archimulator is and how to setup & run Archimulator.

Credits and License Information
------------------

Copyright (c) 2010-2012 by Min Cai (<min.cai.china@gmail.com>)

This program is free software, licensed under the GPL3.
Please, read the license file "COPYING" for further information.

Archimulator in a Glance
------------------

Archimulator is an easy-to-use, feature-rich, and extensible CMP architectural simulator powered by Java on 32/64 bit Linux/Unix..

Web Site
------------------

Please obtain the latest Archimulator code from Archimulator on Github: http://github.com/mcai/Archimulator/.

Key Features
------------------

- Archimulator is written in 100% Java with the aid of JNA (Java Native Access) for native POSIX syscall implementations,
  which assures its portability and usability across many Linux machine configurations.

- Archimulator facilitates interface-based hierarchical object orientation to improve code readability and extensibility.

- Archimulator provides **functional architectural simulation** of:
	- Program loading for statically-linked MIPS32 ELF executables (both Little Endian and Big Endian are supported);
	- Functional execution of common integer and floating-point instructions of MIPS32 ISA;
	- Emulation of common POSIX system calls;
	- Execution of Pthreads based multithreaded programs.

- Archimulator provides **cycle-accurate microarchitectural simulation** of:
	- Separate pipeline structures such as the reorder buffer, separate integer and floating point physical register files;
	- Explicit register renaming based on the merged architectural and rename register file model;
	- Single-threaded superscalar out-of-order execution, multithreaded SMT and CMP execution model;
	- Multi-level inclusive cache hierarchy with the directory-based MESI coherence protocol;
	- Simple cycle-accurate DRAM controller model;
	- Various kinds of static and dynamic branch predictors, checkpointing-based pipeline recovery on branch misprediction.

- Archimulator supports the following **unclassified simulation features**:
	- Support measurement of instructions, pipeline structures and the cache hierarchy;
	- Support generation of instruction traces;
	- Support both execution-driven and trace-driven memory subsystem simulation;
	- Support complex simulation strategies, e.g., cycle count based, instruction count based, and hotspot oriented simulation;
	- Support seamless switching between functional simulation and performance simulation mode;
	- Support the software-controlled helper threaded data prefetching scheme: classification of good, bad and ugly HT requests.

- Archimulator provides the following **common infrastructure**:
	- Cycle-accurate event scheduling and dispatching framework for modeling asynchronous activities;
	- XML-based I/O for configuring and reporting statistics of the simulated architectures, workloads and simulations;
	- An easy-to-use logging mechanism.

- Archimulator currently supports correct execution of all the **Olden benchmark suite** except incorrect output from "health".
  Other benchmarks are being tested.

System Requirements
------------------

Archimulator has been tested on 64 bit **Ubuntu Linux 12.04** on an Intel Core i7 machine with 32 GB memory.

For **developing and running Archimulator**, make sure that:

1. You have Ubuntu Linux 12.04 (or other mainstream Linux distros);

2. To compile and run Java programs: (a) JDK 6.0 or higher and (b) Apache Maven 3.0.4 or higher are installed.

Quick Start
------------------

git clone git://github.com/mcai/Pickapack.Micro.git
cd Pickapack.Micro
mvn clean install

git clone git://github.com/mcai/Pickapack.git
cd Pickapack
mvn clean install

git clone git://github.com/mcai/Archimulator.git
cd Archimulator
mvn clean install war:war

./run_web_server.sh run

Customizing Archimulator for Your Needs
------------------

Archimulator has embedded in the jar a few benchmark binaries under the directory: `benchmarks/` for your convenience.
So if you use Archimulator for testing purposes only, there is no need to compile benchmarks for Archimulator by yourself.

In order to customize the simulations for the Archimulator simulator, you will need to set up or edit a few configuration files.
A few sample configuration files have been provided for your reference under the directory: `configs/`.

How to Compile Benchmarks for Archimulator
------------------

1. Download and unpack crosstool-0.43 from http:www.kegel.com/crosstool/. TODO
   Follow the crosstool instructions to build a GCC-based x86 to MIPS cross toolchain, either little endian (demo-mipsel.sh) or big endian (demo-mips.sh));

2. Use the above generated toolchain to compile MIPS32 binaries to be simulated by Archimulator.
   Add "-mips1" to CFLAGS, "-static" to LDFLAGS during compilation.

Contact
------------------

Please report bugs and send suggestions to:

Min Cai (<min.cai.china@gmail.com>)

School of Computer Science and Technology, Beijing Institute of Technology, Beijing, China
